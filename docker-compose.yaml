services:
  # postgres:
  #   image: postgres:16-alpine3.20
  #   container_name: app_postgres
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: secret
  #     POSTGRES_DB: app
  #     LISTEN_ADDRESSES: "*"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # api:
  #   build:
  #     context: ./api
  #     dockerfile: Dockerfile.dev
  #   container_name: api
  #   command: pnpm start:dev
  #   restart: always
  #   ports:
  #     - "4000"
  #   volumes:
  #     - ./api/src:/usr/src/app/src
  #     - /app/node_modules
  #   env_file:
  #     - ./api/.env
  #   depends_on:
  #     postgres:
  #       condition: service_healthy

  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.dev
  #   container_name: frontend
  #   command: pnpm dev
  #   restart: always
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend/src:/usr/src/app/src
  #     - /app/node_modules
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # AMQP port for clients
      - "15672:15672" # Management console
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf # Mount the config
  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   restart: always
  #   depends_on:
  #     - api
  #     - frontend
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro # Custom Nginx configuration
  #   ports:
  #     - "80:80" # Expose port 80 publicly
  # scrape:
  #   build:
  #     context: ./scrape-microservice
  #     dockerfile: Dockerfile.dev
  #   container_name: scrape-microservice
  #   command: pnpm start:dev
  #   restart: always
  #   volumes:
  #     - ./scrape-microservice/src:/usr/src/app/src
  #     - /app/node_modules
  #   env_file:
  #     - ./api/.env
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  # nats:
  #   image: nats
  #   ports:
  #     - "4222:4222"
volumes:
  rabbitmq_data2:
